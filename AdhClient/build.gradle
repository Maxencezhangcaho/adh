plugins {
    id 'application'
    id 'java'
}
apply from: '../build.gradle'

description = 'AdH Client'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) { // compile-time options:
        options.compilerArgs << '-Xdiags:verbose'
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
        options.encoding = 'UTF-8'
    }
    tasks.withType(JavaExec) { // runtime options:
        args = []
        classpath sourceSets.main.runtimeClasspath
        //debug true
        enableAssertions true
        //jvmArgs '-verbose:gc'
        //jvmArgs '-Xbatch'
        //jvmArgs '-Xms512m', '-Xmx512m'
        //jvmArgs '-XX:+PrintCompilation'
        //jvmArgs '-XX:+UseConcMarkSweepGC'
        jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
    }
}

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
mainClassName = 'fr.adh.client.AdhClient'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

dependencies {
    implementation project(':AdhCommon')
    
    implementation 'com.github.stephengold:Minie:' + minieVersion
    implementation 'com.github.stephengold:Minie:' + minieVersion  + ':sources'
    
    jmeModulesImpl.each { implementationModule ->
		implementation "org.jmonkeyengine:$implementationModule:${jmeVersion}"
		implementation "org.jmonkeyengine:$implementationModule:${jmeVersion}:sources"
    }
    jmeModulesRo.each { runtimeModule ->
		runtimeOnly "org.jmonkeyengine:$runtimeModule:${jmeVersion}"
    }
    
    // get textures and sample to start working quickly
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.3.0-alpha2'
    
    // For True Type Font
    implementation 'com.atr:jme-ttf:2.2.2'
    
    // For GUI
    implementation 'com.simsilica:lemur:1.13.0'
    implementation 'com.simsilica:lemur-proto:1.11.0'
	runtimeOnly 'org.codehaus.groovy:groovy-all:3.0.3'
	compileOnly 'org.jetbrains:annotations:19.0.0'
    
    implementation 'com.jayfella:jme-world-pager:1.0.1'
}

// cleanup tasks
clean.dependsOn('cleanAll')
task cleanAll(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
    delete fileTree(dir: '.', include: '*.dylib')
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
    delete fileTree(dir: '.', include: '*.so')
}
